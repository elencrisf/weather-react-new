{"version":3,"sources":["Components/Weather.js","Components/Form.js","Components/Title.js","App.js","index.js"],"names":["Weather","className","this","props","country","city","date","Math","round","tempMin","tempMax","humidity","description","wind","error","React","Component","Form","onSubmit","loadWeather","type","name","placeholder","Title","main","src","icon","alt","temperature","sunrise","sunset","require","config","App","state","undefined","timezone","getWeather","e","a","target","elements","value","preventDefault","fetch","process","api_call","json","response","console","log","sys","temp","sunriseDT","Date","sunsetDT","srhr","getUTCHours","srmn","getUTCMinutes","snhr","snmn","setState","temp_min","temp_max","weather","speed","alert","dateBuilder","d","day","getDay","getDate","month","getMonth","year","getFullYear","then","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d4c3bf6b.chunk.js","sourcesContent":["\r\n\r\nimport React from \"react\";\r\n\r\nclass Weather extends React.Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n            <div className=\"weather-info\">\r\n                {this.props.country && this.props.city && \r\n                <h2 className=\"weather-city\">            \r\n                    <span className=\"weather__city\">{this.props.city}, {this.props.country}</span>                    \r\n                </h2>\r\n                }\r\n    \r\n                <p className=\"date\"> {this.props.date}</p>\r\n \r\n                <p className=\"weather__key\">Temperature Min: \r\n                    <span className=\"weather__value\"> {Math.round(this.props.tempMin)}°C</span>\r\n                </p>\r\n\r\n                <p className=\"weather__key\">Temperature Max: \r\n                    <span className=\"weather__value\"> {Math.round(this.props.tempMax)}°C</span>\r\n                </p>\r\n  \r\n                <p className=\"weather__key\">Humidity: \r\n                    <span className=\"weather__value\"> {this.props.humidity} %</span>\r\n                </p>\r\n\r\n                <p className=\"weather__key\">Conditions:  \r\n                    <span className=\"weather__value\"> {this.props.description}</span>\r\n                </p>\r\n\r\n                <p className=\"weather__key\">Wind:  \r\n                    <span className=\"weather__value\"> {Math.round(this.props.wind * 3.6)} Km/h speed</span>\r\n                </p>\r\n\r\n                <p className=\"weather__error\"> {this.props.error}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n\r\n                \r\n\r\n\r\n\r\n            \r\n\r\n","import React from \"react\";\r\n\r\nclass Form extends React.Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n                <form onSubmit = {this.props.loadWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n                    {/* <input type=\"text\" name=\"country\" placeholder=\"Country\"/> */}\r\n                    <button>Search</button>\r\n                </form>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nclass Title extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            <div className=\"title-container\">\r\n                <h3 className=\"title-container__title\">Weather </h3>\r\n                <h3 className=\"title-container__subtitle\">{this.props.main}</h3>\r\n            </div>\r\n            <div className=\"title-container__icon\">          \r\n                <img\r\n                src={\r\n                \"https://openweathermap.org/img/wn/\" + this.props.icon + \".png\"\r\n                }\r\n                alt={this.props.icon}\r\n                />\r\n                <h4 className=\"title-container__temperature\">{Math.round(this.props.temperature)}°C</h4>          \r\n            </div>\r\n            <div className=\"title-container__sun\">\r\n                {/* <p className=\"title-container__sunrise\">Sunrise: {this.props.parseZoneTime}00 am</p> */}\r\n                <p className=\"title-container__sunrise\">Sunrise: {this.props.sunrise}:00</p>\r\n                <p className=\"title-container__sunset\">Sunset: {this.props.sunset}:00</p>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Title;","\r\nimport React from \"react\";\r\nimport Weather from \"./Components/Weather\";\r\nimport Form from \"./Components/Form\";\r\nimport Title from \"./Components/Title\";\r\nimport \"./App.css\";\r\nrequire('dotenv').config()\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    main: undefined,\r\n    icon: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    wind: undefined,\r\n    timezone: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    error: undefined,\r\n    // parseZoneTime: undefined\r\n    // sunriseF: undefined,\r\n    // sunsetF: undefined\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=Vancouver&units=metric&appid=${process.env.REACT_APP_AUTH_TOKEN}`)\r\n    .then(response => response.json()) // first of all you use the same argument for both requests. both the response and parsed data uses the same name and it's a bad practice. try to avoid that by calling the json one something like data or more meaningful name\r\n    .then(response => {\r\n\r\nlet sunrise = response.sys.sunrise, \r\n            sunset = response.sys.sunset, //the data is the parsed json in the fetch function and the sys.sunset, sys.sunrise are the properties inside that specific json\r\n            timezone = response.timezone,\r\n            temp = response.main.temp; //This is a way to declare multiple variables without typing var/let/const for every variable.\r\n          sunrise = sunrise * 1000 + timezone * 1000; // sunrise and sunset return the  milliseconds of the date and time that passed since 1/1/1970 so we need to parse it to a date/time format.\r\n          sunset = sunset * 1000 + timezone * 1000;\r\n          let sunriseDT = new Date(sunrise); //this is parsing the milliseconds into a date/time format and storing it in a variable.\r\n          let sunsetDT = new Date(sunset);\r\n          // Sunrise time\r\n          let srhr = sunriseDT.getUTCHours(), //since the openweatherapi return the date in utc time we need to use the utc method of getting hours and minutes\r\n           srmn = sunriseDT.getUTCMinutes();\r\n          // Sunset time\r\n          let snhr = sunsetDT.getUTCHours(), //same thing for the sunset\r\n           snmn = sunsetDT.getUTCMinutes();\r\n\r\n\r\n\r\n    this.setState({ \r\n      temperature: response.main.temp,\r\n      city: response.name,\r\n      country: response.sys.country,\r\n      tempMin: response.main.temp_min,\r\n      tempMax: response.main.temp_max,\r\n      main: response.weather[0].main,\r\n      icon: response.weather[0].icon,\r\n      humidity: response.main.humidity,\r\n      description: response.weather[0].description,\r\n      wind: response.wind.speed,\r\n      timezone: response.timezone,\r\n      sunset: snhr +\":\"+ snmn,\r\n      sunrise: srhr +\":\"+ srmn\r\n      })\r\n    })\r\n  }\r\n\r\n  \r\n  getWeather = async (e) => {\r\n\r\n    const city = e.target.elements.city.value;\r\n    // const country = e.target.elements.country.value;\r\n    e.preventDefault();\r\n    try {\r\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_AUTH_TOKEN}`);\r\n      const response = await api_call.json();\r\n      // let parseZoneTime = parseTime(response.sys.synrise, response.timezone);\r\n      console.log(response);\r\n\r\n      let sunrise = response.sys.sunrise, \r\n            sunset = response.sys.sunset, //the data is the parsed json in the fetch function and the sys.sunset, sys.sunrise are the properties inside that specific json\r\n            timezone = response.timezone,\r\n            temp = response.main.temp; //This is a way to declare multiple variables without typing var/let/const for every variable.\r\n          sunrise = sunrise * 1000 + timezone * 1000; // sunrise and sunset return the  milliseconds of the date and time that passed since 1/1/1970 so we need to parse it to a date/time format.\r\n          sunset = sunset * 1000 + timezone * 1000;\r\n          let sunriseDT = new Date(sunrise); //this is parsing the milliseconds into a date/time format and storing it in a variable.\r\n          let sunsetDT = new Date(sunset);\r\n          // Sunrise time\r\n          let srhr = sunriseDT.getUTCHours(), //since the openweatherapi return the date in utc time we need to use the utc method of getting hours and minutes\r\n            srmn = sunriseDT.getUTCMinutes();\r\n          // Sunset time\r\n          let snhr = sunsetDT.getUTCHours(), //same thing for the sunset\r\n            snmn = sunsetDT.getUTCMinutes();\r\n\r\n\r\n      city ? this.setState({\r\n        temperature: response.main.temp,\r\n        city: response.name,\r\n        country: response.sys.country,\r\n        tempMin: response.main.temp_min,\r\n        tempMax: response.main.temp_max,\r\n        main: response.weather[0].main,\r\n        icon: response.weather[0].icon,\r\n        humidity: response.main.humidity,\r\n        description: response.weather[0].description,\r\n        wind: response.wind.speed,        \r\n        timezone: response.timezone,\r\n        sunset: snhr +\":\"+ snmn,\r\n        sunrise: srhr +\":\"+ srmn,      \r\n        error: \"\"\r\n      }) : this.setState({\r\n        error:\r\n        alert(\"City not informed\"\r\n        )\r\n      })\r\n    } catch(error) {\r\n        alert('City not found');\r\n        console.log('Invalid City' + error);\r\n      \r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  dateBuilder = (d) => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div>\r\n         <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                <Title\r\n                  main={this.state.main}\r\n                  icon={this.state.icon}\r\n                  temperature={this.state.temperature}\r\n                  timezone={this.state.timezone}\r\n                  sunrise={this.state.sunrise}\r\n                  sunset={this.state.sunset}\r\n                  // parseZoneTime={parseTime(this.response.sys.sunrise, this.response.timezone)}\r\n                  // sunriseF={this.getZoneSunrise(new Date())}\r\n                  // sunsetF={this.getZoneSunset(new Date())}\r\n                  />\r\n                </div>\r\n                <div className=\"col-xs-7 form-container\">\r\n                <Form loadWeather={this.getWeather} />\r\n                  <Weather\r\n                    date={this.dateBuilder(new Date())}\r\n                    tempMin={this.state.tempMin}\r\n                    tempMax={this.state.tempMax}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    wind={this.state.wind}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n// export function parseTime (timestamp, timezone) {\r\n//   // let local = new Date();\r\n//   //console.log(local.getTimezoneOffset()*60);\r\n//   //console.log('>>> Timezone: ' + timezone);\r\n\r\n//   //var adjTimestamp = (timestamp * 1000) - timezone - (local.getTimezoneOffset()/60);\r\n//   var adjTimestamp = timestamp * 1000 + (timezone * 1000);\r\n//   //console.log('Adjusted time: ' + adjTimestamp);\r\n\r\n//   var date = new Date(adjTimestamp);\r\n//   // Hours part from the timestamp\r\n//   var hours = date.getUTCHours();\r\n//   // Minutes part from the timestamp\r\n//   var minutes = \"0\" + date.getUTCMinutes();\r\n//   // Seconds part from the timestamp\r\n//   // var seconds = \"0\" + date.getUTCSeconds();\r\n\r\n//   // Will display time in HH:MM:SS format\r\n//   var formattedTime = hours + ':' + minutes.substr(-2); // + ':' + seconds.substr(-2);\r\n  \r\n//   if(isNaN(timestamp) || isNaN(timezone)){\r\n//     return `Is not a number: timestamp [${timestamp}] timezone [${timezone}]`;\r\n//   }\r\n//   return formattedTime;\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  // getZoneSunrise = () => {\r\n\r\n  //   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${Api_Key}`);\r\n  //   const response = await api_call.json();\r\n  //   let sunrise = response.sys.sunrise,\r\n  //         timezone = response.timezone;\r\n  //         sunrise = sunrise * 1000 + (timezone * 1000);\r\n  //         sunriseDT = new Date(sunrise);\r\n  //   let srhr = sunriseDT.getUTCHours(),\r\n  //   srmn = sunriseDT.getUTCMinutes()\r\n    \r\n  //   return `${srhr} ${srmn}`\r\n\r\n  // }\r\n\r\n  // getZoneSunset = () => {\r\n\r\n  //   const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${Api_Key}`);\r\n  //   const response = await api_call.json();\r\n  //   let sunset = response.sys.sunset,\r\n  //         timezone = response.timezone;\r\n  //         sunset = sunset * 1000 + (timezone * 1000);\r\n  //         sunsetDT = new Date(sunset)\r\n  //   let snhr = sunsetDT.getUTCHours()\r\n  //   , snmn = sunsetDT.getUTCMinutes()\r\n\r\n    \r\n  //   return `${snhr} ${snmn}`\r\n\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from \"react\";\r\n// import \"./styles.css\";\r\n\r\n// // import Weather from \"./Weather\";\r\n// // import { Provider } from \"./Context\"; // Import Provider from Context.js\r\n\r\n\r\n\r\n// // function App() {\r\n// //   return (\r\n// //     //We need to wrap everything inside the Provider Component.\r\n// //     <Provider>\r\n// //       <Weather />\r\n// //     </Provider>\r\n// //   );\r\n// // }\r\n\r\n\r\n\r\n// const api = {\r\n//   key: \"27289e1da449c7d3cfb8b0db0cfab0d2\",\r\n//   base: \"https://api.openweathermap.org/data/2.5/\"\r\n// }\r\n\r\n// class App extends React.Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.state = {\r\n//       query: '',\r\n//       weather: []\r\n//     }\r\n//     this.handleChange = this.handleChange.bind(this)\r\n//     this.search = this.search.bind(this)\r\n//   }\r\n\r\n  \r\n\r\n\r\n// componentDidMount() {\r\n// //   fetch(\"https://api.imgflip.com/get_memes\")\r\n// //   .then(response => response.json())\r\n// //   .then(response => {\r\n// //   const { memes } = response.data\r\n// //   console.log(memes[0])\r\n// //   this.setState({ memeImgs: memes })\r\n// //   })\r\n// }\r\n\r\n//   // const [query, setQuery] = useState('');\r\n//   // const [weather, setWeather] = useState({});\r\n\r\n//   search = evt => {\r\n\r\n//     // const query = this.state;\r\n  \r\n//     if (evt.key === \"Enter\") {\r\n//       fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n//         .then(res => res.json())\r\n//         .then(result => {\r\n//           this.setState({ weather: result});\r\n//           // this.setState({ query: ''});\r\n//           // this.setWeather(result);\r\n//           // this.setQuery('');\r\n//           console.log(result);\r\n//         });\r\n//     }\r\n//   }\r\n\r\n//   dateBuilder = (d) => {\r\n//     let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n//     let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n//     let day = days[d.getDay()];\r\n//     let date = d.getDate();\r\n//     let month = months[d.getMonth()];\r\n//     let year = d.getFullYear();\r\n\r\n//     return `${day} ${date} ${month} ${year}`\r\n//   }\r\n\r\n//   handleChange(event) {\r\n//     const { query, value } = event.target\r\n//     this.setState({ [query]: value})\r\n// }\r\n\r\n//   // handleSubmit(event) {\r\n//   //     event.preventDefault();  \r\n//   //     // const randNum = Math.floor(Math.random() * this.state.memeImgs.length);\r\n//   //     // const randMemeImg = this.state.memeImgs[randNum].url;\r\n//   //     this.setState({ randomImg: randMemeImg });\r\n//   // } \r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//       {/* // <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}> */}\r\n//       <div>\r\n      \r\n//           <div className=\"search-box\">\r\n//             <input \r\n//               type=\"text\"\r\n//               className=\"search-bar\"\r\n//               placeholder=\"Search...\"\r\n//               // onChange={e => this.setQuery(e.target.value)}\r\n//               value={this.state.query}\r\n//               onChange={this.handleChange}\r\n//               onKeyPress={this.search}\r\n//             />\r\n//           </div>\r\n//           {(typeof this.state.weather.main != \"undefined\") ? (\r\n//           <div>\r\n//             <div className=\"location-box\">\r\n//               <div className=\"location\">{this.state.weather.name}, {this.state.weather.sys.country}</div>\r\n//               <div className=\"date\">{this.dateBuilder(new Date())}</div>\r\n//             </div>\r\n//             <div className=\"weather-box\">\r\n//               <div className=\"temp\">\r\n//                 {Math.round(this.state.weather.main.temp)}°c\r\n//               </div>\r\n//               <div className=\"weather\">{this.state.weather.weather[0].main}</div>\r\n//             </div>\r\n//           </div>\r\n//           ) : ('')}\r\n      \r\n//       </div>\r\n//       </>\r\n//     );\r\n\r\n//   }\r\n\r\n\r\n// }\r\n// export default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from \"./App\";\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './index.css';\r\n\r\n// import App from './App';\r\n\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   rootElement\r\n// );\r\n\r\n// import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n\r\n// import Box from \"./Box\";\r\n\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     {/* <App /> */}\r\n//     <Box\r\n//       name=\"Raphael\"\r\n//       image=\"https://img.icons8.com/ios-filled/50/000000/maxcdn.png\"\r\n//     />\r\n//     <Box name=\"Elen\" />\r\n//     <Box name=\"Alex\" />\r\n//   </React.StrictMode>,\r\n//   rootElement\r\n// );\r\n\r\n\r\n"],"sourceRoot":""}